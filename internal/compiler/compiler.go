package compiler

import (
	"bytes"
	"fmt"
	"os"
	"path/filepath"
	"text/template"

	"github.com/t1d333/refal5-tree/internal/ast"
	"github.com/t1d333/refal5-tree/internal/parser"
)

type generatedProgram struct {
	Functions []string
}

type Compiler struct {
	parser parser.Refal5Parser
}

func NewRefal5Compiler() *Compiler {
	return &Compiler{
		parser: parser.NewTreeSitterRefal5Parser(),
	}
}

func (c *Compiler) Compile(files []string, options CompilerOptions) {
	sources := [][]byte{}
	trees := []*ast.AST{}
	for _, file := range files {
		code, err := c.readFile(file)
		if err != nil {
			// TODO: wrap error
			return
		}

		sources = append(sources, code)

		for _, source := range sources {
			ast, _ := c.parser.Parse(source)
			trees = append(trees, ast)
		}

		c.Generate(trees)
	}
}

func (c *Compiler) readFile(path string) ([]byte, error) {
	file, err := os.ReadFile(filepath.Clean(path))
	if err != nil {
		return nil, fmt.Errorf("failed to read file %s: %w", path, err)
	}

	return file, nil
}

const (
	mainFileTmpl = `
package main

import (
	os
)

// Define compiled functions
{{ range .Functions }}
   {{ . }}
{{ end }}

func main() {
	// init Go func call
	// start main loop 
}`

	compiledFunctionTmpl = `
// Autogenerated function
func R5t{{.Name}}_ (r *RopeNode[R5Node]) {
	
}`
)

func (c *Compiler) Generate(trees []*ast.AST) (string, error) {
	// TODO: find Go function and generate code for GO
	// TODO: generate code for another functions
	compiledFuncTmpl, _ := template.New("r5t-func").Parse(compiledFunctionTmpl)
	mainTmpl, _ := template.New("r5t-main").Parse(mainFileTmpl)
	generatedFunctions := []string{}
	for _, tree := range trees {
		for _, function := range tree.Functions {
			var buff bytes.Buffer
			compiledFuncTmpl.Execute(&buff, function)
			generatedFunctions = append(generatedFunctions, buff.String())
			// for _, sentence := range function.Body {
			// }
		}
	}

	mainTmpl.Execute(os.Stdout, generatedProgram{Functions: generatedFunctions})
	return "", nil
}
