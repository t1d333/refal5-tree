
package main

import (
	"github.com/t1d333/refal5-tree/pkg/runtime"
	// "fmt"
)

var (
	GoFuncPtr runtime.R5FunctionPtr = r5tGo0_
)

// Autogenerated functions
	 
func r5tGo0_ (l, r int, arg *runtime.Rope, viewFieldRhs *[]runtime.ViewFieldNode) {
	
		
  for i := 0; i < 1; i++ {
    var p []int = make([]int, 2)
		p[0] = l
		p[1] = r
    

if (!runtime.R5tEmpty(p[0], p[1], arg)) {
	continue
}

    
		
			result := runtime.NewRope([]runtime.R5Node{}) 
			localViewField := &[]runtime.ViewFieldNode{}
			
				runtime.BuildRopeViewFieldNode(result, localViewField)

			
				result = runtime.NewRope([]runtime.R5Node{})

			
				runtime.BuildOpenCallViewFieldNode(runtime.R5Function{Name: "Eq0", Ptr: r5tEq0_}, localViewField)

			
				runtime.BuildRopeViewFieldNode(result, localViewField)

			
				result = runtime.NewRope([]runtime.R5Node{})

			
				runtime.BuildOpenCallViewFieldNode(runtime.R5Function{Name: "Test0", Ptr: r5tTest0_}, localViewField)

			
				runtime.BuildRopeViewFieldNode(result, localViewField)

			
				result = runtime.NewRope([]runtime.R5Node{})

			
				runtime.BuildOpenBracketViewFieldNode(localViewField)

			
				runtime.BuildRopeViewFieldNode(result, localViewField)

			
				result = runtime.NewRope([]runtime.R5Node{})

			
				runtime.BuildCloseBracketViewFieldNode(localViewField)

			
				result = result.Insert(result.Len(), []runtime.R5Node{&runtime.R5NodeChar{Char: 65}, &runtime.R5NodeChar{Char: 66}, &runtime.R5NodeChar{Char: 67}, })

			
				runtime.BuildRopeViewFieldNode(result,localViewField)

			
				runtime.BuildCloseCallViewFieldNode(localViewField)

			
				result = runtime.NewRope([]runtime.R5Node{})

			
				runtime.BuildRopeViewFieldNode(result, localViewField)

			
				result = runtime.NewRope([]runtime.R5Node{})

			
				runtime.BuildOpenBracketViewFieldNode(localViewField)

			
				runtime.BuildRopeViewFieldNode(result, localViewField)

			
				result = runtime.NewRope([]runtime.R5Node{})

			
				runtime.BuildOpenBracketViewFieldNode(localViewField)

			
				runtime.BuildRopeViewFieldNode(result, localViewField)

			
				result = runtime.NewRope([]runtime.R5Node{})

			
				runtime.BuildCloseBracketViewFieldNode(localViewField)

			
				runtime.BuildRopeViewFieldNode(result, localViewField)

			
				result = runtime.NewRope([]runtime.R5Node{})

			
				runtime.BuildOpenBracketViewFieldNode(localViewField)

			
				result = result.Insert(result.Len(), []runtime.R5Node{&runtime.R5NodeChar{Char: 65}, &runtime.R5NodeChar{Char: 66}, &runtime.R5NodeChar{Char: 67}, })

			
				runtime.BuildRopeViewFieldNode(result, localViewField)

			
				result = runtime.NewRope([]runtime.R5Node{})

			
				runtime.BuildCloseBracketViewFieldNode(localViewField)

			
				runtime.BuildRopeViewFieldNode(result, localViewField)

			
				result = runtime.NewRope([]runtime.R5Node{})

			
				runtime.BuildCloseBracketViewFieldNode(localViewField)

			
				runtime.BuildRopeViewFieldNode(result,localViewField)

			
				runtime.BuildCloseCallViewFieldNode(localViewField)

			
				result = runtime.NewRope([]runtime.R5Node{})

			
			if result.Len() > 0 {
				runtime.BuildRopeViewFieldNode(result, localViewField)
			}
			*viewFieldRhs  = append(*localViewField, *viewFieldRhs...)
			return
		
  }
	
  panic("Recognition failed")
}
	 
func r5tTest0_ (l, r int, arg *runtime.Rope, viewFieldRhs *[]runtime.ViewFieldNode) {
	
		
  for i := 0; i < 1; i++ {
    /* e.Repeated: 6 8 10 */
    /* e.Tail: 4 */
    var p []int = make([]int, 12)
		p[0] = l
		p[1] = r
    

	
		if (!runtime.R5tBracketsLeft(2, p[0], p[1], arg, p)) {
			continue
		}
	

    
p[4] = p[3] + 1 
p[4 + 1] = p[3]
for end := true; end; end = runtime.R5tOpenEvarAdvance(4, p[1], arg, p) {
	
		
p[6] = p[5] + 1 
p[6 + 1] = p[5]
for end := true; end; end = runtime.R5tOpenEvarAdvance(6, p[1], arg, p) {
	
		

	
		if (!runtime.R5tRepeatedExprTermVarLeft(8, p[7], p[1], 6, arg, p)) {
			continue
		}
	

	
		

if (!runtime.R5tEmpty(p[9], p[1], arg)) {
	continue
}

	
		

	
		if (!runtime.R5tRepeatedExprTermVarLeft(10, p[2], p[3], 6, arg, p)) {
			continue
		}
	

	
		

if (!runtime.R5tEmpty(p[11], p[3], arg)) {
	continue
}

		
	
		result := runtime.NewRope([]runtime.R5Node{}) 
		localViewField := &[]runtime.ViewFieldNode{}
		
			runtime.BuildRopeViewFieldNode(result, localViewField)

		
			result = runtime.NewRope([]runtime.R5Node{})

		
			runtime.BuildOpenBracketViewFieldNode(localViewField)

		
			runtime.CopyExprTermVar(p[6], p[7], arg, result)
		
			runtime.BuildRopeViewFieldNode(result, localViewField)

		
			result = runtime.NewRope([]runtime.R5Node{})

		
			runtime.BuildCloseBracketViewFieldNode(localViewField)

		
			runtime.BuildRopeViewFieldNode(result, localViewField)

		
			result = runtime.NewRope([]runtime.R5Node{})

		
			runtime.BuildOpenBracketViewFieldNode(localViewField)

		
			runtime.CopyExprTermVar(p[4], p[5], arg, result)
		
			runtime.BuildRopeViewFieldNode(result, localViewField)

		
			result = runtime.NewRope([]runtime.R5Node{})

		
			runtime.BuildCloseBracketViewFieldNode(localViewField)

		
		
		if result.Len() > 0 {
			runtime.BuildRopeViewFieldNode(result, localViewField)
		}
		
		*viewFieldRhs  = append(*localViewField, *viewFieldRhs...)
		return
	
}
		
	
}
		
  }
	
  panic("Recognition failed")
}
	 
func r5tEq0_ (l, r int, arg *runtime.Rope, viewFieldRhs *[]runtime.ViewFieldNode) {
	
		
  for i := 0; i < 1; i++ {
    /* e.Equal: 4 6 */
    var p []int = make([]int, 8)
		p[0] = l
		p[1] = r
    

	
		if (!runtime.R5tBracketsRight(2, p[0], p[1], arg, p)) {
			continue
		}
	

    

	
		if (!runtime.R5tCloseExprVar(4, p[0], p[2], arg, p)) {
			continue
		}
	

    

	
		if (!runtime.R5tRepeatedExprTermVarLeft(6, p[2], p[3], 4, arg, p)) {
			continue
		}
	

    

if (!runtime.R5tEmpty(p[7], p[3], arg)) {
	continue
}

    
		
			result := runtime.NewRope([]runtime.R5Node{}) 
			localViewField := &[]runtime.ViewFieldNode{}
			
			if result.Len() > 0 {
				runtime.BuildRopeViewFieldNode(result, localViewField)
			}
			*viewFieldRhs  = append(*localViewField, *viewFieldRhs...)
			return
		
  }
	
  panic("Recognition failed")
}

// Rope with view field
var viewField []runtime.ViewFieldNode

func main() {

	gofunc := &runtime.R5Function{
		Name:	 "GO", 
		Entry: true,
		Ptr:   GoFuncPtr,
	}
	
	viewField = runtime.InitViewField(gofunc)
	runtime.StartMainLoop(viewField)
}